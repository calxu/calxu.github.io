<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>calxu</title>
    <link>https://calxu.github.io/</link>
    <description>Recent content on calxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://calxu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>机器学习笔记-集成学习Bagging</title>
      <link>https://calxu.github.io/note/20200118_ml_bagging/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/note/20200118_ml_bagging/</guid>
      <description>工作也近一年半的时间，工作这段时间一直聚焦于业务，会调参懂业务基本可以解决工作中绝大部分业务问题，很多时候不需要深入理解理论。 最近闲下来有时间把机器学习的理论知识重新梳理学习下。 这篇笔记学习下机器学习中集成学习的一些知识。
集成学习（ensemble learning）是很多机器学习框架所应用到的一个策略。 目前比较有代表性的集成方式是Boosting 和 Bagging。 Boosting集成是每个基学习器间存在强依赖关系、必须串行生成，目前比较有代表性的工业界框架有AdaBoost、GBDT、XGBoost和LightGBM，其中后三者工业界比较常用，同时XGBoost和LightGBM也都是GBDT的变种；Bagging集成是每个基学习器间不需要存在依赖关系、可并行化，其中比较具有代表性的是随机森林（即 **Random Forest **），工业也比较常用。
这篇笔记主要基于周志华老师的《机器学习》西瓜书集成学习部分，聚焦在集成学习之Bagging方法。首先记录有放回采样的过程和特性；其次介绍集成学习Bagging方法，Bagging集成是建立在有放回采样的基础之上；最后介绍随机森林，随机森林是典型的基于Bagging集成的一个扩展变体。
有放回采样（bootstrap sampling） 有放回采样（bootstrap sampling）周志华的西瓜书里也把它称为“自助法”。给定包含 $m$ 个样本的数据集 $D$，我们对它进行采样产生数据集 $D&#39;$。 过程描述如下：每次随机从 $D$ 中挑选一个样本，将其拷贝放入 $D&#39;$ 中，然后再将该样本放回初始数据集 $D$ 中，该样本在下次采样时仍有可能被采到；这个过程重复执行 $m$ 次，就可得到包含 $m$ 个样本的数据集 $D&#39;$，以上便是有放回采样的结果。 $D$ 中有一部分样本会在 $D&#39;$ 中多次出现，而另一部分样本不出现。 样本在 $m$ 次采样中始终不被采到的概率是 $(1-\frac{1}{m})^m$ ，取极限得到 $\lim_{m\to +\infty}(1-\frac{1}{m})^m = \frac{1}{e} \approx 0.368$ ，即通过有放回采样，初始数据集中 $D$ 约有36.8% 的样本未出现在采样数据集 $D&#39;$ 中，而那部分样本可作测试集。
有放回采样在数据集较小，难以有效划分训练/测试集时很有用；同时，有放回采样可以从初始数据集中产生多个不同的训练集，这对集成学习等方法有很大的好处。
集成学习Bagging 欲得到泛化性能强的集成，集成中的个体学习器应尽可能相互独立；虽然个体学习器完全独立在现实任务中无法做到，但可以设法使基学习器尽可能具有较大的差异。 给定一个训练数据集，进行反复采样，可产生出若干个不同的子集，再从每个数据子集中训练出一个基学习器。 同时，为获得很好的集成，个体学习器不能太差，如果采样出的每个子集都完全不同，则每个基学习器只用到了一小部分训练数据，不足以有效学习。 所以反复地有放回采样（bootstrap sampling）是一种有效的方式，同时可产生相互有交叠的采样子集。
Bagging（Bootstrap AGGregatING）集成学习中采样即是采用有放回采样的方式进行采样的。 采样过程描述如下：给定包含 $m$ 个样本的数据集，我们先随机取出一个样本放入采集中，再把该样本放回初始数据集，使得下次采样时该样本仍有可能被选中，这样，经过 $m$ 次随机采样操作，我们得到含 $m$ 个样本的采样集。由有放回采样的性质得：初始训练集中约有63.</description>
    </item>
    
    <item>
      <title>个人博客搭建与运维笔记</title>
      <link>https://calxu.github.io/note/20200107_personal_blog/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/note/20200107_personal_blog/</guid>
      <description>以前一般在CSDN上写博客，但现在CSDN广告越来越泛滥，无法忍受了。稍微研究了下目前可以写博客的平台 CSDN、简书、知乎甚至 微信里写文章，在看文章时都会受各种广告推荐的影响，记得有次在微信全神看推荐算法类的文章，突然中间给我插了条相亲的广告，当时非常恼火。
后来想了想各种博客平台为了赢利终将会采用各种广告的手段，所以还是自己搭建博客吧，而且对于一个做技术的人来说也确实有必要搭一个个人博客。下面就对我个人所面临的 框架选择、基础搭建过程、主题选择、部署和日常维护 做一些记录。
博客框架的选择 对于一个非专业Web开发的人来说，自己实施搭建成本太高了。所以一定要借用现有的开源框架来搭建，网上查了下主流框架主要有Jekyll、Hexo和Hugo，也看了很多人的blog，印象特深的是 谢益辉 ，他也讲述了他用Jekyll的一些坑，然后转向Hugo框架，我觉得他的个人博客非常的nice，所以也顺着他的路用Hugo来搭建了。至于Hexo和Hugo的比较，目前来看基于Hexo还是比基于Hugo搭建的人要多，教程也是Hexo居多。但是Hugo目前也已经渐渐形成生态，基于Hugo搭建的主题也非常丰富 [6] ，Hugo也是以速度性能见长，所以当时也就基于Hugo来搭建个人博客了。
Hugo是由Go语言实现的静态网站生成器，还是比较简单容易上手的。官方提供的quick start [2] 也是可以在短时间内快速搭建一个个人网站的。
对于这篇blog而言，主要是Hugo框架学习和操作实践、主题选择方面的一些注意点和部署方面的实践。关于Hugo的使用Google下，也有很多的教程，我比较推荐官网的 quick start [2] 、 两个Youtube视频 [8] [9] 和 参考文献中的教程 [4] [5] [7]  。
基础搭建过程 这里主要介绍在应用主题前，一些基础环境的搭建。与官网提供的 quick start 教程 [2] 一致，这里对生成的目录做了稍微详细的讲解。
安装Hugo环境 $ brew install hugo $ hugo version  以上通过 hugo version 来验证hugo环境安装是否成功。这里是基于macOS环境安装，其它操作系统参考 官网安装 。
生成个人网站 $ hugo new site blog_test  以上命令行会创建一个新的文件夹blog_test，该文件夹下包含Hugo最基本目录结构，其中blog_test目录下文件如下：
. ├ archetypes/ ├ config.toml ├ content/ ├ data/ ├ layouts/ ├ static/ └ themes/  生成文件包含6个文件夹 和 1个全局配置文件，下面依次对这7个文件做相应的说明。</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://calxu.github.io/links/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/links/</guid>
      <description> 以下是个人收藏的一些值得自己学习的资料、平台和blog。
学习资料  周志华：《机器学习》西瓜书PDF  学习平台  极客时间：高质量学习技术的平台  技术博客（偏工程）  王垠：思想值得学习；
 陈皓：曾阿里专家，每周都要逛他的推荐文章；
 赖明星：腾讯工程师；
 阮一峰：经常需逛逛他的blog；
 谢益辉：blog主题是follow他的，R语言高手；
 戴铭：IOS高手；
 antirez：redis创始人，提高了我对开源的认知；
 苏大老师：苏大计算机系挺喜欢的一位老师；
 IT草根：东大学长
 Byvoid：前Google工程师，技术大牛；
 张驰原：谷歌大脑工作；
  技术博客（偏学术）  Andrew Ng：偶尔会去看看吴老师最近的研究；
 吴军博士：非常喜欢吴军老师《浪潮之巅》这本书，但blog好像不怎么更新了；
 陈立杰：计算机理论，偶尔会关注计算机理论的发展；
 李航：李航老师，《统计学习方法》作者；
  其它博客  方舟子：观点值得学习；  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://calxu.github.io/about/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/about/</guid>
      <description>我叫CalXu，性别男，目前就职于度小满金融（原百度金融）。
本科：2011~2013，南京邮电大学，计算机应用技术； 2013~2015，东南大学成贤学院，计算机科学与技术;
硕士：2015~2018，苏州大学，计算机技术；
硕士小论文：
 Inferring Social Ties from Multi-view Spatiotemporal Co-occurrence (CCF C类)
 Context Co-occurrence Based Relationship Prediction in Spatiotemporal Data (EI检索)
  本科毕业论文：扫雷游戏设计 ( PDF , code )
自评：做技术的手艺人
个人相关链接：Github Linkedin</description>
    </item>
    
    <item>
      <title>利用开源ss工具快速搭建翻墙VPN</title>
      <link>https://calxu.github.io/note/20191101_shadowsocks/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/note/20191101_shadowsocks/</guid>
      <description>搭建ss的方法，网上有很多，请自行Google。 这里提供下链接ss官网的搭建方法， 目前GFW已经具备识别ss流量的能力，但每次好像都是国家大事件时才进行封堵，但封堵时也误杀了很多正常的流量的ip。 所以过了这段关键时期，GFW会放行，这就需要重新搭建ss。
这篇文章主要记录下搭建ss翻墙软件的最小配置，方便自己在GFW封杀后再快速搭建翻墙的VPN。
客户端配置 客户端软件下载  mac下载
 windows下载
   注：下载最新的Assets即可  客户端配置 这里提供下我的ss帐号密码供大家使用，别薅我流量，黑客也不要攻击我机器，VPN仅供程序员学习使用，不能作恶； ip可能会被GFW封，被封后我再重新切换下ip，关注这个blog即可。
地址： 47.240.10.78:8432 加密方法： aes-256-cfb 密码： Dont_be_evil 备注： Dont_be_evil  客户端的工作原理（MAC版）： 启动软件会启动3个子程序，可通过 &amp;ldquo;ps aux | grep -i shadowsocks&amp;rdquo; 查看到 ShadowsocksX-NG、ss-local 和 privoxy 三个子程序； 与此同时，MAC中网络&amp;gt;高级&amp;gt;代理&amp;gt;自动代理配置 会被配置为软件自带的pac文件；
 ShadowsocksX-NG 只是一个Swift写的一个GUI壳子；
 ss-local为编译好了的程序，ss-local默认监听1080端口（可设置），接收socks协议的请求并转发至服务端；
 privoxy是对http协议的代理，监听1087端口，然后转发到1080端口由ss-local程序负责转发；
   注：以上原理详情可参考Github ShadowsocksX-NG官网  服务端配置 购买VPS  这里我购买的是阿里云香港区，供参考；  配置server端环境 安装环境： $ apt install python3-pip $ pip3 install shadowsocks  配置文件： $ cat /etc/shadowsocks.</description>
    </item>
    
    <item>
      <title>Git命令学习笔记02</title>
      <link>https://calxu.github.io/note/20190810_git/</link>
      <pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/note/20190810_git/</guid>
      <description>目前使用Git管理项目半年时间，对Git最常用的基础命令已经全部掌握， 这里记录一些Git管理项目中一些常用命令参数，不了解这些参数也能应付大多数项目管理， 但了解这些参数会有利于代码的管理。
配置Git 初始设置 git --version # 查看git是否安装成功 git config --global user.name &amp;quot;Calvin,Xu&amp;quot; # 设置用户名 git config --global user.email &amp;quot;csxucaixu@gmail.com&amp;quot; # 设置邮箱 git config --global --list # 显示全局config的配置 git config --global color.ui auto # 提高git的可读性  需设置使用Git时的姓名和邮箱地址，以及提高Git的可读性，以上命令会在&amp;rdquo;~/.gitconfig&amp;rdquo;添加相应的设置:
[user] name = Calvin,Xu email = csxucaixu@gmail.com [color] ui = auto  自定义.gitignore .gitignore # git管理需忽略的文件，.gitignore配置的规则与linux通配符一致  常用命令参数 git add --help # 查看git add命令的使用文档，所有命令均可通过此方式查看使用说明  git add -u # 把本地有改动的文件添加至暂存区  git diff # 查看工作区与暂存区所含文件的区别 git diff filename # 查看工作区与暂存区指定文件的区别 git diff --cached # 查看暂存区与HEAD所含文件的区别 git diff --cached filename # 查看暂存区与HEAD指定文件的区别 git diff HEAD # 查看工作区与HEAD所含文件的区别 git diff HEAD filename # 查看工作区与HEAD指定文件的区别  git reset HEAD filename # 取消暂存区指定文件的修改，保持与最新分支一致 git checkout -- filename # 取消工作区指定文件的修改，保持与暂存区一致 git reset --hard commidID # HEAD恢复成commidID指向的状态，并且工作区和暂存区恢复成commitID指向的状态  git stash list # 列出存盘中的所有信息 git stash # 当前状态存盘 git stash pop # 存盘状态弹出  日志管理命令参数 git log # 显示提交的日志记录 git log --oneline # 以简洁的方式显示提交的日志记录 git log -n 4 --oneline # 以简洁的方式显示最近提交的4条日志记录 git log --all # 显示所有分支的提交日志记录 git log --all --online --graph # 以图形化的方式显示所有分支的日志记录  分支管理命令参数 git branch -a # 查看分支，-a会列出所有分支 git branch -v # 查看分支，-v参数会列出分支的描述信息  git merge dev # 将dev分支合并至当前分支 git merge --allow-unrelated-histories dev # 将不相关的dev分支合并至当前分支 git merge --abort # 恢复merge之前的状态  远程仓库命令参数 git remote # 列出已经存在的远程分支 git remote -v # 列出已经存在的远程分支详细信息 git remote rename # 修改某个远程仓库的简短名称 git remote add [shortname] [url] # 指定一个简单的名字来引用远程仓库  git clone origin local # 将远程origin仓库克隆至本地仓库  git fetch origin master # 将远程origin最新内容拉至本地master分支  git push origin master # 参数：git push &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;，首次推送需加参数-u git push origin --tags # git push不会推送标签，需手动推送 git push origin --all # 推送本地所有分支  快捷操作 git mv # 给文件重命名，不通过linux中的mv命令来操作 git rm # 删除文件，不通过linux中的rm命令来操作  参考文献  [1] 极客时间.</description>
    </item>
    
    <item>
      <title>Git命令学习笔记01</title>
      <link>https://calxu.github.io/note/20190208_git/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/note/20190208_git/</guid>
      <description>工作半年时间了，做了一些项目，对代码的组织有点凌乱。 Git这么好的代码管理工具一直都养成不了使用的良好习惯，每次到代码一团乱偶尔也会误删，误删后才想起Git，这次狠下心决定系统学习下Git，以后坚持用Git。 这里作了一些自己学习的Git常用命令笔记，方便以后自己参考。 附下适合学习的LearnGitBranching可视化教程，以上资料供学习参考。
配置Git Linux安装Git sudo apt install git  安装完后需要配置Git。因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：名字和Email地址； Note：git config命令的 &amp;ndash;global 参数表示这台机器的所有Git仓库都会使用这个配置。
git config --global user.name &amp;quot;Calvin,Xu&amp;quot; git config --global user.email &amp;quot;csxucaixu@gmail.com&amp;quot;  自定义Git .gitignore # 忽略某些文件时，需要按格式编写.gitignore  常用命令 git init # 初始化Git仓库 git add # 把文件添加到暂存库 git commit -m # 把暂存库中文件提交到仓库，-m后面输入本次提交的概述 git status # 随时查看仓库当前的状态 git diff # 查看文件修改前后的difference git reset # 作用1：回退版本；作用2：把暂存区的修改撤消掉（即unstage） git reflog # 查看命令历史 git checkout # 作用1：丢弃工作区的修改（通常后接--转义）；作用2：切换分支 git rm # 删除工作区文件，并将此次删除放入暂存区；  git diff # 查看文件修改前后的difference，该命令可以查看工作区、暂存区、最新提交之间的差别。不加参数默 认查看工作区和暂存区的差别；后通常接HEAD（指向当前分支中最新一次提交的指针），在执行git commit命令之前通常先 执行git diff HEAD命令，比较本次提交与上次提交之前的差别。  git reset --hard # 回溯版本，后接版本号。比如HEAD，即表示当前版本；HEAD^表示上一个版本 git reset HEAD &amp;lt;file&amp;gt; # 可以把暂存区的修改撤消  git checkout -- &amp;lt;file&amp;gt; # 丢弃工作区的修改，回到最近一次git commit或git add的状态，‘--’作用是表示后面接的是 文件路径，以避免歧义，没有‘--’就变成了“切换到另一个分支“的命令。  git rm # 先手动删除文件，然后使用git rm &amp;lt;file&amp;gt;和git add &amp;lt;file&amp;gt;效果是一样的。  日志管理 git log # 显示从最近至最远的commit的版本 git commit --amend # 修改提交信息 git rebase -i # 修改历史commit；压缩历史commit (内容比较多，后续需继续学习)  git log # 显示从最近至最远的commit的版本。后可加上目录名，便会显示该目录下的日志；如果加的是文件名， 会显示与该文件相关的日志。常用参数：--pretty=oneline 精简显示；--graph 以图的方式显示；--abbrev-commit 显示 精简的commit id号；-p 参数显示文件前后差别。  分支管理 git branch # 查看分支，该命令会列出所有分支，当前分支前会标一个*号 git branch dev # 创建名为dev的新分支 git branch -a # 查看所有分支（包括本地分支和远程分支）的信息 git branch -d # 删除分支 git branch -D # 强制删除分支 git branch --set-upstream-to=origin/dev dev # 指定本地dev分支与远程origin/dev分支的链接  git checkout # 切换分支 git checkout -b # 创建并切换分支，等价于先git branch；再git checkout git checkout -b dev origin/dev # 创建远程origin的dev分支到本地dev分支 git checkout --orphan dev # 创建空白分支，完全干净的分支（不依赖任何父节点）  git merge # 合并某分支至当前分支 git merge --no-ff # 禁用默认的Fast Forward模式，在merge时生成一个新的commit  远程仓库 git remote # 查看远程仓库的信息 git remote -v # 显示更详细的信息 git remote add name url # 关联远程仓库  git clone # 克隆仓库 git fetch # 将远程主机最新内容拉至本地，用户需检查是否需合并至本机分支 git pull origin master # 将远程主机最新内容拉至本地后直接合并，git pull = git fetch + git merge git push origin master # 推送本地master分支内容至远程，首次推送需加-u参数以便与远程分支建立关联 git push --set-upstream origin dev # 若本地首次新建的dev分支，则新建分支需与远程分支进行关联  标签管理 git tag # 查看所有标签 git tag &amp;lt;tagname&amp;gt; # 用于新建一个标签，默认为HEAD，也可以指定commit id git tag -d # 删除一个本地标签 git tag -a &amp;lt;tagname&amp;gt; -m # 可以指定标签信息 git show &amp;lt;tagname&amp;gt; # 查看详细说明  快捷操作 git commit -am # 可以省略使用git add命令将已跟踪的文件放到暂存区。等价于git add ; git commit -m  参考文献  [1] 廖雪峰.</description>
    </item>
    
  </channel>
</rss>