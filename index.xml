<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://calxu.github.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://calxu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git命令学习笔记02</title>
      <link>https://calxu.github.io/post/2019-08-10-git/</link>
      <pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/post/2019-08-10-git/</guid>
      <description>目前使用Git管理项目半年时间，对Git最常用的基础命令已经全部掌握， 这里记录一些Git管理项目中一些常用命令参数，不了解这些参数也能应付大多数项目管理， 但了解这些参数会有利于代码的管理。
配置Git 初始设置 git --version # 查看git是否安装成功 git config --global user.name &amp;quot;Calvin,Xu&amp;quot; # 设置用户名 git config --global user.email &amp;quot;csxucaixu@gmail.com&amp;quot; # 设置邮箱 git config --global --list # 显示全局config的配置 git config --global color.ui auto # 提高git的可读性  需设置使用Git时的姓名和邮箱地址，以及提高Git的可读性，以上命令会在&amp;rdquo;~/.gitconfig&amp;rdquo;添加相应的设置:
[user] name = Calvin,Xu email = csxucaixu@gmail.com [color] ui = auto  自定义.gitignore .gitignore # git管理需忽略的文件，.gitignore配置的规则与linux通配符一致  常用命令参数 git add --help # 查看git add命令的使用文档，所有命令均可通过此方式查看使用说明  git diff # 查看工作区与暂存区所含文件的区别 git diff filename # 查看工作区与暂存区指定文件的区别 git diff --cached # 查看暂存区与HEAD所含文件的区别 git diff --cached filename # 查看暂存区与HEAD指定文件的区别  git reset HEAD filename # 取消暂存区指定文件的修改，保持与最新分支一致 git checkout -- filename # 取消工作区指定文件的修改，保持与暂存区一致 git reset --hard commidID # HEAD恢复成commidID指向的状态，并且工作区和暂存区恢复成commitID指向的状态  git stash list # 列出存盘中的所有信息 git stash # 当前状态存盘 git stash pop # 存盘状态弹出  日志管理命令参数 git log # 显示提交的日志记录 git log --oneline # 以简洁的方式显示提交的日志记录 git log -n 4 --oneline # 以简洁的方式显示最近提交的4条日志记录 git log --all # 显示所有分支的提交日志记录 git log --all --online --graph # 以图形化的方式显示所有分支的日志记录  分支管理参数 git branch -a # 查看分支，-a会列出所有分支 git branch -v # 查看分支，-v参数会列出分支的描述信息  快捷操作 git mv # 给文件重命名，不通过linux中的mv命令来操作 git rm # 删除文件与重命名类似，不通过linux中的rm命令来操作  参考文献  [1] 极客时间.</description>
    </item>
    
    <item>
      <title>Git命令学习笔记01</title>
      <link>https://calxu.github.io/post/2019-02-08-git/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://calxu.github.io/post/2019-02-08-git/</guid>
      <description>工作半年时间了，做了一些项目，对代码的组织有点凌乱。 Git这么好的代码管理工具一直都养成不了使用的良好习惯，每次到代码一团乱偶尔也会误删，误删后才想起Git，这次狠下心决定系统学习下Git，以后坚持用Git。 这里作了一些自己学习的Git常用命令笔记，方便以后自己参考。 附下适合学习的LearnGitBranching可视化教程 和国外网友制作的Git Cheat Sheet，以上资料供学习参考。
配置Git Linux安装Git sudo apt install git  安装完后需要配置Git。因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：名字和Email地址； Note：git config命令的 &amp;ndash;global 参数表示这台机器的所有Git仓库都会使用这个配置。
git config --global user.name &amp;quot;Calvin,Xu&amp;quot; git config --global user.email &amp;quot;csxucaixu@gmail.com&amp;quot;  自定义Git .gitignore 忽略某些文件时，需要按格式编写.gitignore  常用命令 git init 初始化Git仓库 git add 把文件添加到暂存库 git commit -m 把暂存库中文件提交到仓库，-m后面输入本次提交的概述 git status 随时查看仓库当前的状态 git diff 查看文件修改前后的difference git reset 作用1：回退版本；作用2：把暂存区的修改撤消掉（即unstage） git reflog 查看命令历史 git checkout 作用1：丢弃工作区的修改（通常后接--转义）；作用2：切换分支 git rm 删除工作区文件，并将此次删除放入暂存区；  git diff 查看文件修改前后的difference，该命令可以查看工作区、暂存区、最新提交之间的差别。不加参数默 认查看工作区和暂存区的差别；后通常接HEAD（指向当前分支中最新一次提交的指针），在执行git commit命令之前通常先 执行git diff HEAD命令，比较本次提交与上次提交之前的差别。  git reset --hard 回溯版本，后接版本号。比如HEAD，即表示当前版本；HEAD^表示上一个版本 git reset HEAD &amp;lt;file&amp;gt; 可以把暂存区的修改撤消  git checkout -- &amp;lt;file&amp;gt; 丢弃工作区的修改，回到最近一次git commit或git add的状态，‘--’作用是表示后面接的是 文件路径，以避免歧义，没有‘--’就变成了“切换到另一个分支“的命令。  git rm 先手动删除文件，然后使用git rm &amp;lt;file&amp;gt;和git add &amp;lt;file&amp;gt;效果是一样的。  日志管理 git log 显示从最近至最远的commit的版本 git commit --amend 修改提交信息 git rebase -i 修改历史commit；压缩历史commit (内容比较多，后续需继续学习)  git log 显示从最近至最远的commit的版本。后可加上目录名，便会显示该目录下的日志；如果加的是文件名， 会显示与该文件相关的日志。常用参数：--pretty=oneline 精简显示；--graph 以图的方式显示；--abbrev-commit 显示 精简的commit id号；-p 参数显示文件前后差别。  分支管理 git branch 查看分支，该命令会列出所有分支，当前分支前会标一个*号 git branch dev 创建名为dev的新分支 git branch -a 查看所有分支（包括本地分支和远程分支）的信息 git branch -d 删除分支 git branch -D 强制删除分支 git branch --set-upstream-to=origin/dev dev 指定本地dev分支与远程origin/dev分支的链接  git checkout 切换分支 git checkout -b 创建并切换分支，等价于先git branch；再git checkout git checkout -b dev origin/dev 创建远程origin的dev分支到本地dev分支 git checkout --orphan dev 创建空白分支，完全干净的分支（不依赖任何父节点）  git merge 合并某分支至当前分支 git merge --no-ff 禁用默认的Fast Forward模式，在merge时生成一个新的commit  远程仓库 git remote # 查看远程仓库的信息 git remote -v # 显示更详细的信息 git remote add name url # 关联远程仓库  git clone 克隆仓库 git fetch 将远程主机最新内容拉至本地，用户需检查是否需合并至本机分支 git pull 将远程主机最新内容拉至本地后直接合并，git pull = git fetch + git merge git push origin master 推送本地master分支内容至远程，首次推送需加-u参数以便与远程分支建立关联 git push --set-upstream origin dev 若本地首次新建的dev分支，则新建分支需与远程分支进行关联  标签管理 git tag 查看所有标签 git tag &amp;lt;tagname&amp;gt; 用于新建一个标签，默认为HEAD，也可以指定commit id git tag -d 删除一个本地标签 git tag -a &amp;lt;tagname&amp;gt; -m 可以指定标签信息 git show &amp;lt;tagname&amp;gt; 查看详细说明  快捷操作 git commit -am 可以省略使用git add命令将已跟踪的文件放到暂存区。等价于git add ; git commit -m  参考文献  [1] 廖雪峰.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://calxu.github.io/about/</link>
      <pubDate>Mon, 21 Jan 2019 00:16:27 +0800</pubDate>
      
      <guid>https://calxu.github.io/about/</guid>
      <description>我叫Calvin,Xu，性别男，目前就职于度小满金融（原百度金融）。
本科：2011~2013，南京邮电大学，计算机应用技术； 2013~2015，东南大学成贤学院，计算机科学与技术;
硕士：2015~2018，苏州大学，计算机技术；201706~201709在百度实习。</description>
    </item>
    
  </channel>
</rss>